#pandas DIO
'''
-pandas는 외부파일을 읽어와서 데이터프레임으로 변화하는 함수를 제공
-어떤 파일이든 데이터프레임으로 변환되고 나면 pandas의 모든 함수와 기능 사용 가능
외부파일 불러오기
pandas.read_확장자 이름("주소")
                        *1. \->/
                         2. /파일명.확장자 추가
                            >D/python/주식Data.csv
        내보내기
DataFrame.to_확장자 이름("주소")
*list자료는 내보낼 수 없음.
 DataFrame[]는 가능
'''
#불러오기
#CSV
'''
– 데이터 값을 쉼표(,)로 구분하고 있는 텍스트 파일
– 쉼표로 열을 구분하고 줄바꿈으로 행을 구분
csv파일 -> 데이터프레임
pandas.read_csv(“파일경로(이름)”)
옵션1: 열 이름으로 사용될 행의 번호
header=0: 0행을 열 지정(기본값)
header=1: 1행을 열 지정
header=None: 행을 열 지정하지 않음
names  :열 이름으로 사용할 '특정' 문자열 리스트
옵션2: 행 인덱스로 사용할 열의 번호 또는 열 이름
index_col=False: 인덱스 지정하지 않음(기본값)
index_col=“열이름” : 특정 열을 인덱스 지정

옵션's
sep=',' 로 되어있을거임.
skiprows :처음 몇 줄을 skip할 것인지 설정(숫자로), 행 번호를 담은 리스트 설정도 가능
skip_footer :마지막 몇 줄을 skip할 것인지 설정(숫자로)
encoding :텍스트 인코딩 종류를 지정(ex]encoding='utf-8',encoding='cp949')
'''
import pandas as pd
file_path = './read_csv_sample.csv'
df1 = pd.read_csv(file_path)#heder=0이 디폴트값
print(df1)
df2 = pd.read_csv(file_path, header=None)
print(df2)
df3 = pd.read_csv(file_path, index_col=None)
print(df3)
df4 = pd.read_csv(file_path, index_col='c0')#c0 열의 각 원소가 각 행 인덱스가 됨.

#EXCEL
'''
– Excel 파일의 행과 열은 데이터프레임의 행, 열로 일대일 대응
– read_csv() 함수와 거의 비슷하게 사용
#셀 합계가 되어있어도, 한 줄만 빼고 나머지는 NaN처리
Excel파일 -> 데이터프레임
pandas.read_excel(“파일경로(이름))
옵션1:
header=0: 0행을 열 지정
header=1: 1행을 열 지정
header=None: 행을 열 지정하지 않음
옵션2:
index_col=False: 인덱스 지정하지 않음
index_col=“열이름” : 특정 열을 인덱스 지정
'''
import pandas as pd
df1 = pd.read_excel('./남북한발전전력량.xlsx')#header=0이 디폴트값으로 들어가 있는거임.
df2 = pd.read_excel('./남북한발전전력량.xlsx', header=None)#맨 위의 행이 자료로 들어가고 각 열의 인덱스는 0,1,2...로 됨.
print(df1)
print(df2)

#HTML
'''
– HTML 웹 페이지에 있는 <table> 태그에서 표 형식의 데이터를 찾아서 데
이터프레임으로 변환
– 여러 개의 표가 있는 경우 데이터프레임을 원소로 갖는 리스트가 반환
HTML 표 속성 읽기
pandas.read_html(“웹주소(URL)” 또는 “HTML 파일경로 (이름)”)
표 여러개면 []로 묶임. 표1=a,표2=b 면 [a,b]
>표의 list화
a만 부르기=table_1[0]
'''

#저장하기/내보내기
"to_확장자명()이다. pandas가 아니라서 pd필요없음"
#CSV
'''
-데이터프레임은 2차원 배열 구조 데이터이기 때문에 2차원 구조를 갖는 csv파일로 변환가능
DataFrame 객체.to_csv(“파일경로(이름)”)
'''
import pandas as pd
data = {'name' : [ 'Jerry', 'Riah', 'Paul'],
'algol' : [ "A", "A+", "B"],
'basic' : [ "C", "B", "B+"],
'c++' : [ "B+", "C", "C+"],
}
df = pd.DataFrame(data)
df.set_index('name', inplace=True)
print(df)
df.to_csv("./df_sample.csv")

#EXCEL
'''
– 데이터프레임의 행과 열은 Excel파일의 행과 열로 일대일대응
– to_excel( ) 함수 적용 (openpyxl 라이브러리 설치필요)
DataFrame 객체.to_excel(“파일경로(이름)”)

– 여러 개의 데이터프레임을 하나의 Excel 파일로 저장 가능
– 시트 옵션을 통해 시트 이름 적용하여 저장
pandas.ExcelWriter(“파일경로(이름)”)
1.위치지정
2.위치에 저장할 데이터 시트에 데이터 프레임 지정
3.save()써서 저장
'''
import pandas as pd
data = {'name' : [ 'Jerry', 'Riah', 'Paul'],
'algol' : [ "A", "A+", "B"],
'basic' : [ "C", "B", "B+"],
'c++' : [ "B+", "C", "C+"],
}
df = pd.DataFrame(data)
df.set_index('name', inplace=True)
print(df)
df.to_excel("./df_sample.xlsx")

#ExcelWriter()활용
import pandas as pd
data1 = {'name' : [ 'Jerry', 'Riah', 'Paul'], 'algol' : [ "A", "A+", "B"],
'basic' : [ "C", "B", "B+"], 'c++' : [ "B+", "C", "C+"]}
data2 = {'c0':[1,2,3], 'c1':[4,5,6], 'c2':[7,8,9], 'c3':[10,11,12], 'c4':[13,14,15]}
df1 = pd.DataFrame(data1)
df1.set_index('name', inplace=True)
df2 = pd.DataFrame(data2)
df2.set_index('c0', inplace=True)
writer = pd.ExcelWriter("./df_excelwriter.xlsx")
df1.to_excel(writer, sheet_name="sheet1")
df2.to_excel(writer, sheet_name="sheet2")
writer.save()
