#Operator
print("hello", "world")
print("hello"\"world")


#indexing
word=input("문자열입력:")
length=len(word)
print(length)
if length % 2==1:
    letter=word[length//2]
    print("중간글자:%s" %letter)
else:
    letter1=word[(length//2)-1]
    letter2=word[(length//2)]
    print("middle letter:%s" %(letter1+letter2))
    
message=input("input string:")
length=len(message)
reverse=""
for letter in range(0, length):
    reverse += message[length-(letter+1)]
print("revers string:"+reverse) #"revers string:"문자열과 reverse문자열이 '+'로 인해 붙어서 나옴
print("revers string:%s"%reverse) #'%s'를 이용해 'reverse'의 값이 'string:'다음에 바로 나옴


#slicing
message="hello python world"
print(len(message))
print(message[0:6], message[13:18])
print(message[1:16:4])
# message[0:5]="korea" 는 오류남
message_1="korea"+message[5:18]
print(message_1)
message
message[:5]
message[:]
message[::2]#두 칸씩 건너 뛰기
message[::-1]#print reverse

import sys
idnumber = input("주민번호를 '-' 없이 입력 : ")
if "1" <= idnumber[6] <= "2":
    year = "19" + idnumber[:2] + "년"
elif "3" <= idnumber[6] <= "4":
    year = "20" + idnumber[:2] + "년"
else:
    print("잘못 입력")
    sys.exit()
month = idnumber[2:4] + "월"
day = idnumber[4:6] + "일"
print(year + month + day)


#split
message='hello python korea'
message.split() #문자열에서 부분문자열을 특정 구분문자로 분리하여 리스트로 반환
message='hello python korea'
message.splitline() #문자열에서 줄 바꿈이 포함된 문자열을 행 단위로 분리
message='hello python\nkorea fighting'
message.splitlines()


#join
message='hello python'
":".join(message)#인수에서 지정한 문자열이나 리스트의 각 항목들에 구분 문자를 중간에 삽입하여 하나의 문자열을 만들어 반환
person=["jon", "25", "uk", "male"]
"-".join(person)#"-" 대신 '-'로 작은 따옴표 사용시 실행 안됨
message="let's go python world"#apostrophe '가 사용되어 string에 "를 사용함
":".join(message.split())

name= input("input name:")
name.split()
name=name.replace(" ","")#string.replace("a","b")는 문자열의 a를 b로 치환해주는 것
pw=input("input passwd:")
for count in range(0, len(pw)-1):
    if pw[count]==pw[count+1]:
        print("Successive characters exist.")
        break;
    else:
        print("Saved successfully.")
        print("name:%s, pw:%s" %(name,pw))

score = input("점수를 차례로 (-)로 입력 : ")
total = 0
for item in score.split("-"):
    total += int(item)#정수 처리 안해주면 error
    print("총점 : %d" %total)


#list type
family=["father", "mother", "sister", "me"]
score=[100,50,70,30]
person=["aemy","john","p.o","amanda"]
test=["jhon",50,20, [25,30]]

'''
내장함수 list()
- 이 함수는 어떤 순차 타입의 자료형을 리스트로 변환할 때 사용
– 이 함수를 사용하여 리스트 생성도 가능
– 형식 : list(순차형자료)

내장 함수 range()
– 해당 범위의 숫자들의 리스트를 반환하는 함수
– 형식 : range(start, end, step)
• start : 시작 값, end : 종료 값, step : 증가 값
– 시작 값을 생략할 경우 0부터 생성하며, 종료 값은 리스트에 포함 안됨
– 사용 예 : range(1, 5) → [1, 2, 3, 4]
'''

numbers1=list()
numbers2=list("one")
numbers3=range(10,30,2)#출력안됨. range()는 단순히 규칙을 가진 연속된 정수들을 생성하기만 함. so, list()를 사용해 반환 값을 list로 변환해야 함.
numbers4=list(range(10,30,2))
print(numbers1,numbers2,numbers3,numbers4)


#indexing of list
score=[100,88,95,73,93]
print(score[0], score[4], score[-1], score[-3])
message=[10,20,['morning','evening']]
print(message[2])

  #list 전체 요소를 가져오기 위한 method
for score in[100,98,75,86,50]:
    print(score)
score=[100,98,75,86,50]
count=0
while count < len(score):#len(list)는 list 내 요소의 개수를 나타냄
    print(score[count])
    count+=1
score = [100,98,75,86,50]
for count in range(score):#range(a,b,c)에서 a는 시작점. b는 끝점(포함X). c는 간격. 간격이 1이고, 시작점이 0인 경우는 생략.
    print(score[count])

person=["jhon", 20, "hyeong", 40, "soybeen", 1]
for count in range(len(person)):
    if count%2==0:
        print("name:%s"%person[count], end=",")
    else:
        print("age:%d"%int(person[count]))

#slicing of list
number=[10,20,30,"one","two","three"]
print(number[1:3], number[3:6:2])#listobject[a,b,c] a:start, b:end, c: step
print(number[:3], number[3:])#listobject[:]from start to end, listobject[a:]from a to end, listobject[:b]from start to b
'''
리스트 요소의 변경
– 리스트는 문자열과는 다르게 데이터 요소의 변경이 가능함
– 슬라이싱으로 리스트를 확장하거나 축소할 수 있음
 사용 예
– numbers = [10, 20, 30, 40, 50]
– numbers[1] = 60 → [10, 60, 30, 40, 50]
– numbers[1] = [60, 70] → [10, [60, 70], 30, 40, 50]
– numbers[1:3] = [60, 70] → [10, 60, 70, 40, 50]
– numbers[1:3] = [60, 70, 80] → [10, 60, 70, 80, 40, 50]
– numbers[1:3] = [60] → [10, 60, 40, 50]
– numbers[1:3] = 60 → error
– numbers[1:3] = [] → [10, 40, 50]
– numbers = [] → []

'''

numbers=[10,20,30,40,50]
numbers[0]=60
numbers[1]=["one", "two"]
print(numbers)
numbers[2:4]=[70,80,90]#특정 범위를 다른 요소로 수정
print(numbers)
numbers[3:]=[]#4번째 이후의 numbers의 list요소는 사라짐
print(numbers)
numbers=[]#list 요소 all delete
print(numbers)

fibo=list(range(10))
fibo[0]=1
fibo[1]=1
for cont in range(2,10):
    fibo[count]=fibo[count-2]+fibo[count-1]
print("fibonacci:", fibo)

#operation of list
  #list의 결합
number1 = [10, 20, 30]; number2 = [40, 50, 60]
numbers=number1 + number2
print(numbers)
numbers=number1 * 3
print(numbers)
  #list의 분리
number1 = [10]; number2 = [20, 30, 40, 50]
numbers=number1, *number2
print(numbers)
number1 = [10, 20, 30, 40]; number2 = [5]
numbers=*number1, number2
print(numbers)

#function of list
score=[85,93,80,75,60,50]
print(max(score), min(score))
names=["jhon","katy parry", "sofia", "samanda"]
print(max(names),min(names))

#search of list
'''
리스트 내의 요소 찾기
– in 연산자 : 리스트 내에 어떤 요소가 포함되어 있는지 조사
– not in 연산자 : 리스트 내에 어떤 요소가 포함되어 있지 않은지 조사
– 주로 if문을 사용하여 요소를 검사함
– True, False의 부울형 자료를 반환
index() 메서드
– 인수로 지정한 값이 리스트에서 처음 나타나는 인덱스를 반환
– 사용 예 : 리스트.index(찾을 요소, 찾을 위치)
   • 두 번째 인수에 찾을 위치에 대한 인덱스를 지정
– 찾는 값이 없을 경우 오류를 발생하므로 예외 처리가 필요함
count() 메서드
– 리스트 내의 요소들 중 특정 데이터가 몇 개나 있는지 확인
– 사용 예 : 리스트.count(찾을 요소)
'''
score=[85,93,80,75,60,50]
85 in score
names=["jhon","katy parry", "sofia", "samanda"]
"jon"in names
score=[85,93,80,75,60,50]
score.index(93)
score.index(85,50)
score=[85,60,40,50,60,80,60,60,50]
score.count(60)

#insert item of list
'''
리스트.append(데이터)
 • 리스트의 마지막 요소로 새로운 요소를 추가
 • 새로운 리스트를 생성하여 추가할 경우 먼저 공백 리스트를 생성함
리스트.insert(인덱스, 데이터)
 • 리스트에 삽입할 위치를 지정하여 새로운 요소를 추가
 • 삽입한 위치에 원래 존재하던 요소는 하나씩 뒤로 이동
리스트.extend(확장할 리스트)
 • 리스트의 마지막에 다른 리스트의 요소를 새롭게 추가하여 확장
 • 새로운 리스트를 생성하지 않고 기존의 리스트가 변경됨
'''
nation=[]
nation.append("korea")
nation.append([10,550])
print(nation)

nation=["korea","india"]
nation.insert(1,"japen")#1번 index에 삽입
nation.insert(1,"uk")
print(nation)

nation=["korea","india"]
nation.extend(["usa","uk"])
print(nation)
nation.extend(["paris","tokyo"])
print(nation)

student=[]
total=0
for count in range(5):
    score=int(input("input score:"))
    student.append(score)
    total+=score
average=total/len(student)
print("student score:", student)
print("score mean:%.1f" %average)#average의 숫자가 소수점 1자리까지 표기

nation = []
while True:
     name = input("국가를 입력 (종료:exit) : ")
     if name == "exit":
        break
     if name in nation:
        print("중복된 국가가 존재합니다")
        print("다시 입력하세요")
        continue
     nation.append(name)
print("국가 :", nation)
 

#delete item of list
numbers=[10,20,30,40,50]
del numbers[1]#del listobject[index]
print(numbers)

del numbers[1:3]#del listobject[slicing]
print(numbers)
del numbers

numbers=[10,20,30,40,50,20]
numbers.remove(30)#list.remove(삭제할 요소)
print(numbers)
numbers.remove(20)#지정삭제 하는 것임.
print(numbers)

numbers=[10,20,30,40,50]
del_item=numbers.pop()#메서드에 인수를 지정하지 않은 경우, list의 마지막 요소를 찾아서 삭제
print(del_item)#remove()의 경우, delete값을 반환하지 않음
print(del_item, numbers)
del_item=numbers.pop(20)#특정 값을 삭제할 경우, 메서드의 인수에 index지정
print(del_item)
print(del_item, numbers)

names = []
name_str = input("5명의 이름을 차례로 입력 : ")
names = name_str.split()
search = input("삭제할 이름을 입력 : ")
if search in names:
    names.remove(search)
    print("%s가 삭제되었습니다" %search)
else:
    print("%s가 존재하지 않습니다" %search)
    print("이름 리스트")
for count in range(len(names)):
    print("%d.%s" %(count+1, names[count]), end=" ")
print()
number = int(input("삭제할 번호를 입력 : "))
if number in range(1, 6):
    print("%s가 삭제되었습니다" %names.pop(number-1))
else:
    print("번호가 존재하지 않습니다")
print(names)


#sort of index
'''
sorted(순차타입의 자료) 내장 함수
 • 기본적으로 오름차순으로 데이터를 정렬하고 리스트의 복사본을 얻음
 • 원본 리스트는 변경되지 않음
sorted(순차타입의 자료, reverse=True)
 • 내림차순으로 정렬할 경우 인수에 reverse키워드를 사용하여 True로 지정
sorted() 함수에 문자열이 올 경우
 • 문자열의 각 문자를 요소로 하는 리스트를 생성하여 정렬함
 • sorted("python") → ['h', 'n', 'o', 'p', 't', 'y']
사용 예 : newlist = sorted(oldlist)
'''
numbers=[1,5,3,7,8,6,8,4,4,3]
print(sorted(numbers))#오름차순
numbers.sort()
print(numbers)
print(sorted(numbers, reverse=True))#내림차순
numbers.sort(reverse=True)
print(numbers)
'''
sort() 메서드는 새로운 리스트를 만들지 않고,
기존의 리스트를 정렬하여 원본을 수정하므로 반환 값이 발생하지 않음. 
So, 정렬 전 리스트를 다시 사용하고자 한다면 미리 복사본을 준비하여야 함.
'''
numbers=[1,5,3,7,8,6,8,4,4,3]
numbers.reverse()#단순하게 list 요소의 순서를 reverse하여 역순으로 sort함.
print(numbers)

